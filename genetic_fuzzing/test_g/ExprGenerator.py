# Generated by Grammarinator 23.7

import itertools

from math import inf
from grammarinator.runtime import *

class ExprGenerator(Generator):


    def EOF(self, parent=None):
        pass
    EOF.min_depth = 0

    def prog(self, parent=None):
        with RuleContext(self, UnparserRule(name='prog', parent=parent)) as current:
            self.expr(parent=current)
            self.EOF(parent=current)
            return current
    prog.min_depth = 2

    def expr(self, parent=None):
        with RuleContext(self, UnparserRule(name='expr', parent=parent)) as current:
            with AlternationContext(self, [2, 2, 1, 2], [1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    self.expr(parent=current)
                    with AlternationContext(self, [0, 0], [1, 1]) as weights1:
                        choice1 = self._model.choice(current, 1, weights1)
                        UnlexerRule(src=['*', '/'][choice1], parent=current)
                    self.expr(parent=current)
                elif choice0 == 1:
                    self.expr(parent=current)
                    with AlternationContext(self, [0, 0], [1, 1]) as weights2:
                        choice2 = self._model.choice(current, 2, weights2)
                        UnlexerRule(src=['+', '-'][choice2], parent=current)
                    self.expr(parent=current)
                elif choice0 == 2:
                    self.INT(parent=current)
                elif choice0 == 3:
                    UnlexerRule(src='(', parent=current)
                    self.expr(parent=current)
                    UnlexerRule(src=')', parent=current)
            return current
    expr.min_depth = 1

    def NEWLINE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='NEWLINE', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[1]), parent=current)
            return current
    NEWLINE.min_depth = 0

    def INT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='INT', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[2]), parent=current)
            return current
    INT.min_depth = 0

    _default_rule = prog

    _charsets = {
        0: list(itertools.chain.from_iterable([range(32, 127)])),
        1: list(itertools.chain.from_iterable([range(10, 11), range(13, 14)])),
        2: list(itertools.chain.from_iterable([range(48, 58)])),
    }
